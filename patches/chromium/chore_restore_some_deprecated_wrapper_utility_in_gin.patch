From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: deepak1556 <hop2deep@gmail.com>
Date: Tue, 5 Aug 2025 02:26:29 +0900
Subject: chore: restore some deprecated wrapper utility in gin

Restores part of https://chromium-review.googlesource.com/c/chromium/src/+/6799157

Patch can be removed once cppgc migration is complete
https://github.com/electron/electron/issues/47922

diff --git a/gin/object_template_builder.cc b/gin/object_template_builder.cc
index 5a31687bbd0fca61db3a7c41ed73d938340d6446..b84f5fd336bc4b61b2cd0b2fc92382b00e928701 100644
--- a/gin/object_template_builder.cc
+++ b/gin/object_template_builder.cc
@@ -141,7 +141,7 @@ ObjectTemplateBuilder::ObjectTemplateBuilder(v8::Isolate* isolate,
                   : "Objects of this type cannot be created using the "
                     "constructor"))),
       template_(constructor_template_->InstanceTemplate()) {
-  template_->SetInternalFieldCount(0);
+  template_->SetInternalFieldCount(kNumberOfInternalFields);
 }
 
 ObjectTemplateBuilder::ObjectTemplateBuilder(v8::Isolate* isolate,
diff --git a/gin/per_isolate_data.cc b/gin/per_isolate_data.cc
index 884990426f13a6abca22a60dd8cc0685f8435b23..64ac0a64a05105532f3cda898aeac68c21338e60 100644
--- a/gin/per_isolate_data.cc
+++ b/gin/per_isolate_data.cc
@@ -68,12 +68,32 @@ PerIsolateData* PerIsolateData::From(Isolate* isolate) {
   return static_cast<PerIsolateData*>(isolate->GetData(kEmbedderNativeGin));
 }
 
+void PerIsolateData::DeprecatedSetObjectTemplate(DeprecatedWrapperInfo* info,
+                                                 Local<ObjectTemplate> templ) {
+  deprecated_object_templates_[info] = Eternal<ObjectTemplate>(isolate_, templ);
+}
+
 void PerIsolateData::SetObjectTemplate(
     const WrapperInfo* info,
     Local<ObjectTemplate> templ) {
   object_templates_[info] = Eternal<ObjectTemplate>(isolate_, templ);
 }
 
+void PerIsolateData::SetFunctionTemplate(DeprecatedWrapperInfo* info,
+                                         Local<FunctionTemplate> templ) {
+  function_templates_[info] = Eternal<FunctionTemplate>(isolate_, templ);
+}
+
+v8::Local<v8::ObjectTemplate> PerIsolateData::DeprecatedGetObjectTemplate(
+    DeprecatedWrapperInfo* info) {
+  DeprecatedObjectTemplateMap::iterator it =
+      deprecated_object_templates_.find(info);
+  if (it == deprecated_object_templates_.end()) {
+    return v8::Local<v8::ObjectTemplate>();
+  }
+  return it->second.Get(isolate_);
+}
+
 v8::Local<v8::ObjectTemplate> PerIsolateData::GetObjectTemplate(
     const WrapperInfo* info) {
   ObjectTemplateMap::iterator it = object_templates_.find(info);
@@ -83,6 +103,15 @@ v8::Local<v8::ObjectTemplate> PerIsolateData::GetObjectTemplate(
   return it->second.Get(isolate_);
 }
 
+v8::Local<v8::FunctionTemplate> PerIsolateData::GetFunctionTemplate(
+    DeprecatedWrapperInfo* info) {
+  FunctionTemplateMap::iterator it = function_templates_.find(info);
+  if (it == function_templates_.end()) {
+    return v8::Local<v8::FunctionTemplate>();
+  }
+  return it->second.Get(isolate_);
+}
+
 void PerIsolateData::AddDisposeObserver(DisposeObserver* observer) {
   dispose_observers_.AddObserver(observer);
 }
diff --git a/gin/per_isolate_data.h b/gin/per_isolate_data.h
index bce889749415da341e6e6e4082ac06bbeb4bb80a..d748c1cf8cef7da90686686f1b8072bcd530541d 100644
--- a/gin/per_isolate_data.h
+++ b/gin/per_isolate_data.h
@@ -51,11 +51,24 @@ class GIN_EXPORT PerIsolateData {
 
   static PerIsolateData* From(v8::Isolate* isolate);
 
+  void DeprecatedSetObjectTemplate(
+      DeprecatedWrapperInfo* info,
+      v8::Local<v8::ObjectTemplate> object_template);
+
   void SetObjectTemplate(const WrapperInfo* info,
                          v8::Local<v8::ObjectTemplate> object_template);
 
+  void SetFunctionTemplate(DeprecatedWrapperInfo* info,
+                           v8::Local<v8::FunctionTemplate> function_template);
+
+  v8::Local<v8::ObjectTemplate> DeprecatedGetObjectTemplate(
+      DeprecatedWrapperInfo* info);
+
   v8::Local<v8::ObjectTemplate> GetObjectTemplate(const WrapperInfo* info);
 
+  v8::Local<v8::FunctionTemplate> GetFunctionTemplate(
+      DeprecatedWrapperInfo* info);
+
   void AddDisposeObserver(DisposeObserver* observer);
   void RemoveDisposeObserver(DisposeObserver* observer);
   void NotifyBeforeDispose();
@@ -74,14 +87,20 @@ class GIN_EXPORT PerIsolateData {
   }
 
  private:
+  typedef std::map<DeprecatedWrapperInfo*, v8::Eternal<v8::ObjectTemplate>>
+      DeprecatedObjectTemplateMap;
   typedef std::map<const WrapperInfo*, v8::Eternal<v8::ObjectTemplate>>
       ObjectTemplateMap;
+  typedef std::map<DeprecatedWrapperInfo*, v8::Eternal<v8::FunctionTemplate>>
+      FunctionTemplateMap;
 
   // PerIsolateData doesn't actually own |isolate_|. Instead, the isolate is
   // owned by the IsolateHolder, which also owns the PerIsolateData.
   raw_ptr<v8::Isolate, AcrossTasksDanglingUntriaged> isolate_;
   raw_ptr<v8::ArrayBuffer::Allocator, DanglingUntriaged> allocator_;
+  DeprecatedObjectTemplateMap deprecated_object_templates_;
   ObjectTemplateMap object_templates_;
+  FunctionTemplateMap function_templates_;
   base::ObserverList<DisposeObserver> dispose_observers_;
   std::shared_ptr<V8ForegroundTaskRunnerBase> task_runner_;
   std::shared_ptr<V8ForegroundTaskRunnerBase> user_visible_task_runner_;
diff --git a/gin/public/wrapper_info.h b/gin/public/wrapper_info.h
index 34b5f1c30c05152122f23708a1df62f00296fcd6..dac3459dc822db1b242288293605ab4c4a6cf76f 100644
--- a/gin/public/wrapper_info.h
+++ b/gin/public/wrapper_info.h
@@ -13,6 +13,17 @@
 
 namespace gin {
 
+enum InternalFields {
+  kWrapperInfoIndex,
+  kEncodedValueIndex,
+  kNumberOfInternalFields,
+};
+
+struct GIN_EXPORT DeprecatedWrapperInfo {
+  static DeprecatedWrapperInfo* From(v8::Local<v8::Object> object);
+  const GinEmbedder embedder;
+};
+
 struct GIN_EXPORT WrapperInfo : v8::Object::WrapperTypeInfo {
   const WrappablePointerTag pointer_tag;
 };
diff --git a/gin/wrappable.cc b/gin/wrappable.cc
index 803b5648e1c3ec3621149e98850bebfbf7f2de75..dd49202103993ee03379acd6873b92bc8fccb786 100644
--- a/gin/wrappable.cc
+++ b/gin/wrappable.cc
@@ -48,7 +48,7 @@ v8::MaybeLocal<v8::Object> WrappableBase::GetWrapper(v8::Isolate* isolate) {
     CHECK(!templ.IsEmpty());
     data->SetObjectTemplate(info, templ);
   }
-  CHECK_EQ(0, templ->InternalFieldCount());
+  CHECK_EQ(kNumberOfInternalFields, templ->InternalFieldCount());
   v8::Local<v8::Object> wrapper;
   // |wrapper| may be empty in some extreme cases, e.g., when
   // Object.prototype.constructor is overwritten.
@@ -56,6 +56,12 @@ v8::MaybeLocal<v8::Object> WrappableBase::GetWrapper(v8::Isolate* isolate) {
     return {};
   }
 
+  // Delete the internal fields once gin_helper::DeprecatedWrappable does
+  // not exist anymore.
+  int indices[] = {kWrapperInfoIndex, kEncodedValueIndex};
+  void* values[] = {nullptr, nullptr};
+  wrapper->SetAlignedPointerInInternalFields(2, indices, values);
+
   AssociateWithWrapper(isolate, wrapper);
   return wrapper;
 }
