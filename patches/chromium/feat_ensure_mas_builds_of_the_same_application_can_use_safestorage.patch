From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samuel Attard <sattard@salesforce.com>
Date: Thu, 29 Sep 2022 16:58:47 -0700
Subject: feat: ensure mas builds of the same application can use safestorage

This change ensures that MAS builds of applications with an equivilant darwin build that share the same name do not fight over access to the same Safe Storage account.

Specifically this changes the account name for app "My App" from "My App" to "My App AppStore" if the app is using a MAS build of Electron.

We attempt to migrate the safe storage key from the old account, if that migration succeeds we delete the old key and move on.

Existing apps that aren't built for the app store should be unimpacted, there is one edge case where a user uses BOTH an AppStore and a darwin build of the same app only one will keep it's access to the safestorage key as during the migration we delete the old account.  This is an acceptable edge case as no one should be actively using two versions of the same app.

diff --git a/components/os_crypt/sync/keychain_password_mac.mm b/components/os_crypt/sync/keychain_password_mac.mm
index 3d388a85aaf52acdcc2b7aaea56f5a24b2435bff..7a0d28cbf1651e76a4356f1193b502d27e7a8ed4 100644
--- a/components/os_crypt/sync/keychain_password_mac.mm
+++ b/components/os_crypt/sync/keychain_password_mac.mm
@@ -25,6 +25,12 @@
 using KeychainNameContainerType = const base::NoDestructor<std::string>;
 #endif
 
+#if IS_MAS_BUILD()
+const char kAccountNameSuffix[] = " App Store Key";
+#else
+const char kAccountNameSuffix[] = " Key";
+#endif
+
 namespace {
 
 // These two strings ARE indeed user facing.  But they are used to access
@@ -79,10 +85,47 @@
 KeychainPassword::~KeychainPassword() = default;
 
 std::string KeychainPassword::GetPassword() const {
+  const std::string account_name_suffix = kAccountNameSuffix;
+  const std::string suffixed_account_name = GetAccountName() + account_name_suffix;
   auto password =
-      keychain_->FindGenericPassword(GetServiceName(), GetAccountName());
+      keychain_->FindGenericPassword(GetServiceName(), suffixed_account_name);
+
+  if (password.has_value()) {
+    return std::string(base::as_string_view(*password));
+  }
+
+  // If the error was anything other than "it does not exist" we should error out here
+  // This normally means the account exists but we were deniged access to it
+  if (password.error() != errSecItemNotFound) {
+    OSSTATUS_LOG(ERROR, password.error()) << "Keychain lookup for suffixed key failed";
+    return std::string();
+  }
+
+  // If the suffixed account didn't exist, we should check if the legacy non-suffixed account
+  // exists. If it does we can use that key and migrate it to the new account
+  base::apple::ScopedCFTypeRef<SecKeychainItemRef> item_ref;
+  password =
+      keychain_->FindGenericPassword(GetServiceName(), GetAccountName(),
+                                     item_ref.InitializeInto());
 
   if (password.has_value()) {
+    // If we found the legacy account name we should copy it over to
+    // the new suffixed account
+    OSStatus error = keychain_->AddGenericPassword(
+        GetServiceName(), suffixed_account_name, *password);
+
+    if (error == noErr) {
+      // If we successfully made the suffixed account we can delete the old
+      // account to ensure new apps don't try to use it and run into IAM
+      // issues
+      error = keychain_->ItemDelete(item_ref.get());
+      if (error != noErr) {
+        OSSTATUS_DLOG(ERROR, error) << "Keychain delete for legacy key failed";
+      }
+    } else {
+      OSSTATUS_DLOG(ERROR, error) << "Keychain add for suffixed key failed";
+    }
+
     return std::string(base::as_string_view(*password));
   }
 
diff --git a/crypto/apple_keychain.h b/crypto/apple_keychain.h
index c2aeebc449c7cc2d2e2fcd30dde3e8b9732aa0b3..ce0e8790d3de473b2c369783938e3bd7433f6dcd 100644
--- a/crypto/apple_keychain.h
+++ b/crypto/apple_keychain.h
@@ -43,11 +43,16 @@ class CRYPTO_EXPORT AppleKeychain {
   // std::vector<uint8_t> arm is populated instead.
   virtual base::expected<std::vector<uint8_t>, OSStatus> FindGenericPassword(
       std::string_view service_name,
-      std::string_view account_name) const;
+      std::string_view account_name,
+      AppleSecKeychainItemRef* item = nullptr) const;
 
   virtual OSStatus AddGenericPassword(std::string_view service_name,
                                       std::string_view account_name,
                                       base::span<const uint8_t> password) const;
+
+#if BUILDFLAG(IS_MAC)
+  virtual OSStatus ItemDelete(AppleSecKeychainItemRef item) const;
+#endif  // !BUILDFLAG(IS_MAC)
 };
 
 #if BUILDFLAG(IS_MAC)
diff --git a/crypto/apple_keychain_mac.cc b/crypto/apple_keychain_mac.cc
index 0613e22fc0ce35378dc3580d797badd5f2680ae6..3ec4a2ba2fa5679363fabfa007be6200a0660ce7 100644
--- a/crypto/apple_keychain_mac.cc
+++ b/crypto/apple_keychain_mac.cc
@@ -58,14 +58,15 @@ AppleKeychain::~AppleKeychain() = default;
 
 base::expected<std::vector<uint8_t>, OSStatus>
 AppleKeychain::FindGenericPassword(std::string_view service_name,
-                                   std::string_view account_name) const {
+                                   std::string_view account_name,
+                                   AppleSecKeychainItemRef* item) const {
   base::AutoLock lock(GetMacSecurityServicesLock());
   uint32_t password_length = 0;
   void* password_data = nullptr;
   OSStatus status = SecKeychainFindGenericPassword(
       nullptr, service_name.length(), service_name.data(),
       account_name.length(), account_name.data(), &password_length,
-      &password_data, nullptr);
+      &password_data, item);
   if (status != noErr) {
     return base::unexpected(status);
   }
@@ -91,6 +92,11 @@ OSStatus AppleKeychain::AddGenericPassword(
       password.data(), nullptr);
 }
 
+OSStatus AppleKeychain::ItemDelete(AppleSecKeychainItemRef item) const {
+  base::AutoLock lock(GetMacSecurityServicesLock());
+  return SecKeychainItemDelete(item);
+}
+
 ScopedKeychainUserInteractionAllowed::ScopedKeychainUserInteractionAllowed(
     Boolean allowed,
     OSStatus* status) {
