From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samuel Attard <sattard@anthropic.com>
Date: Fri, 15 Aug 2025 14:58:12 -0700
Subject: feat: add support for embedder snapshot validation

IsValid is not exposed despite being commented as for embedders, this exposes something that works for us.

diff --git a/gin/v8_initializer.cc b/gin/v8_initializer.cc
index e07bdaeccecc8015462e35d5cf4606335e2e962c..28b133626cf3488dee6f43bfd0ac9b6b14ed3980 100644
--- a/gin/v8_initializer.cc
+++ b/gin/v8_initializer.cc
@@ -75,11 +75,23 @@ bool GenerateEntropy(unsigned char* buffer, size_t amount) {
   return true;
 }
 
+static base::RepeatingCallback<void(v8::StartupData*)>& SnapshotValidator() {
+  static base::NoDestructor<base::RepeatingCallback<void(v8::StartupData*)>>
+      validator(
+          base::BindRepeating([](v8::StartupData* data) -> void { /* empty */ }));
+  return *validator;
+}
+
+void SetV8SnapshotValidatorInner(const base::RepeatingCallback<void(v8::StartupData*)>& callback) {
+  SnapshotValidator() = std::move(callback);
+}
+
 void GetMappedFileData(base::MemoryMappedFile* mapped_file,
                        v8::StartupData* data) {
   if (mapped_file) {
     data->data = reinterpret_cast<const char*>(mapped_file->data());
     data->raw_size = static_cast<int>(mapped_file->length());
+    SnapshotValidator().Run(data);
   } else {
     data->data = nullptr;
     data->raw_size = 0;
@@ -223,6 +235,10 @@ constexpr std::string_view kV8FlagFeaturePrefix = "V8Flag_";
 
 }  // namespace
 
+void SetV8SnapshotValidator(const base::RepeatingCallback<void(v8::StartupData*)>& callback) {
+  SetV8SnapshotValidatorInner(std::move(callback));
+}
+
 class V8FeatureVisitor : public base::FeatureVisitor {
  public:
   void Visit(const std::string& feature_name,
diff --git a/gin/v8_initializer.h b/gin/v8_initializer.h
index 6f7382cd600cd34916d9382878aee4b469dae5d0..61ed0f46437d2e1abbcebcfb64df06d17c8d9139 100644
--- a/gin/v8_initializer.h
+++ b/gin/v8_initializer.h
@@ -11,6 +11,7 @@
 
 #include "base/files/file.h"
 #include "base/files/memory_mapped_file.h"
+#include "base/functional/callback.h"
 #include "build/build_config.h"
 #include "gin/array_buffer.h"
 #include "gin/gin_export.h"
@@ -28,6 +29,8 @@ class StartupData;
 
 namespace gin {
 
+void SetV8SnapshotValidator(const base::RepeatingCallback<void(v8::StartupData*)>& callback);
+
 class GIN_EXPORT V8Initializer {
  public:
   // This should be called by IsolateHolder::Initialize().
