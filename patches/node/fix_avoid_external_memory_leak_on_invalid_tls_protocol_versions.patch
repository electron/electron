From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Shelley Vohr <shelley.vohr@gmail.com>
Date: Fri, 24 Oct 2025 15:32:50 +0200
Subject: fix: avoid external memory leak on invalid TLS protocol versions

Fixes a crash caused by unbalanced external memory accounting when
tls.createSecureContext() is called with invalid minVersion/maxVersion values.

Prior to this change, _tls_common.js instantiated a native SecureContext
which incremented V8 external memory via
env->external_memory_accounter()->Increase(kExternalSize) in crypto_context.cc
before protocol version validation ran in toV(), so an early
ERR_TLS_INVALID_PROTOCOL_VERSION throw left the +1024 bytes un-decremented
and V8 asserted in ExternalMemoryAccounter::~ExternalMemoryAccounter
during Environment teardown.

Fix this by reordering the constructor to validate minVersion/maxVersion first and
only allocate the native SecureContext on success.

This should be upstreamed to Node.js.

diff --git a/lib/_tls_common.js b/lib/_tls_common.js
index 66331d2d9999e93e59cbce9e153affb942b79946..5ed67392cedb704d8ad2494a094dfae3a10bd160 100644
--- a/lib/_tls_common.js
+++ b/lib/_tls_common.js
@@ -57,6 +57,7 @@ const {
 } = require('internal/tls/secure-context');
 
 function toV(which, v, def) {
+  console.log(`toV called with which=${which}, v=${v}, def=${def}`);
   v ??= def;
   if (v === 'TLSv1') return TLS1_VERSION;
   if (v === 'TLSv1.1') return TLS1_1_VERSION;
@@ -82,10 +83,11 @@ function SecureContext(secureProtocol, secureOptions, minVersion, maxVersion) {
       throw new ERR_TLS_PROTOCOL_VERSION_CONFLICT(maxVersion, secureProtocol);
   }
 
+  const minV = toV('minimum', minVersion, tls.DEFAULT_MIN_VERSION);
+  const maxV = toV('maximum', maxVersion, tls.DEFAULT_MAX_VERSION);
+
   this.context = new NativeSecureContext();
-  this.context.init(secureProtocol,
-                    toV('minimum', minVersion, tls.DEFAULT_MIN_VERSION),
-                    toV('maximum', maxVersion, tls.DEFAULT_MAX_VERSION));
+  this.context.init(secureProtocol, minV, maxV);
 
   if (secureOptions) {
     validateInteger(secureOptions, 'secureOptions');
diff --git a/src/crypto/crypto_context.cc b/src/crypto/crypto_context.cc
index 8fbf4f25a91b953f3d2868889c7ee06932ee3c5f..96f6ea29525bc2c60297e7be5bc1d0b74cd568e1 100644
--- a/src/crypto/crypto_context.cc
+++ b/src/crypto/crypto_context.cc
@@ -1355,10 +1355,8 @@ SecureContext::SecureContext(Environment* env, Local<Object> wrap)
 }
 
 inline void SecureContext::Reset() {
-  if (ctx_ != nullptr) {
-    env()->external_memory_accounter()->Decrease(env()->isolate(),
-                                                 kExternalSize);
-  }
+  env()->external_memory_accounter()->Decrease(env()->isolate(),
+                                                kExternalSize);
   ctx_.reset();
   cert_.reset();
   issuer_.reset();
